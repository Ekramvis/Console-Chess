#Game Class
#  def initialize
#     two player objects
#     board object
#     game loop method
#  end
#
#  game loop method
#    check "checkmate condition" => call to board class
#    check "check condition" => call to board class
#    display board => call to board class
#
#    flip switch for Player object => Game variable
#
#    until valid move => call to board class
#        get Player input => call to player class
#    end
#
#    change_board_state => call to board class
#  end
#
#end

#Board Class
#
#  initialize
#    create board grid (array of arrays)
#    fill board with piece objects
#  end
#
#  change_board_state
#
#  check
#
#  checkmate
#
#  validate_move => calls Piece class& sends down board
#
#
#  display_board
#    - display blank or call piece.display_self
#
#end

#Piece Class
#
# location, player_id
#
# initialize(location)
#
# move(@board)
#    - ##check if on the board
#    - ##check for own player on end point
#
# display self
#
#end

#RandomPiece Class < Piece Class
#
# next_legal_moves
#
# custom_move(board)
#     ## super + own constraints on move
#    - ##check if in path
#    - ##check if puts own king in check
#    ### special rules for: King, pawn, Knight
#
#end

#Player Class

#  player_input(start,end)
#
#end